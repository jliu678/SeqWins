#' @export
seqW<- function(fileList1, fileList2=NULL,alignType="RNA",subReadThreads=3L,shortreadRAM=1e8,
genomeRefFile="./GCF_000001405.26_GRCh38_genomic.fna.gz",
genomeAnnotFile="./GCF_000001405.39_GRCh38.p13_genomic.gtf.gz",
...){
repList<-vector(mode="list",length=length(fileList1))
for (i in 1:length(f1)){
res<-TrimAndFilter(fl1 = f1[i],fl2 = f2[i],...)
repList[i]<-list(res)}
buildindex(basename="my_index",reference=genomeRefFile)
dir.create("./bam")
if (is.null(fileList2)) {
align(index="my_index",readfile1=paste0(gsub(fileList1,pattern ="\\.fastq\\.gz$",replacement = ""),"_trimed.fastq.gz"),
readfile2=NULL,
output_file = file.path("./bam", gsub(basename(fo1),pattern ="\\.fastq\\.gz$",replacement = "\\.bam")),
type=alignType,nthreads=subReadThreads,...)
saveRDS(object = featureCounts(files=file.path("./trimed", gsub(basename(fileList1),pattern ="\\.fastq\\.gz$",replacement = "\\.bam")),
isPairedEnd=F,nthreads=subReadThreads,
annot.ext =genomeAnnotFile,
isGTFAnnotationFile = T,
verbose = T),
file = gsub(x=basename(fileList1),pattern ="\\.fastq\\.gz$",replacement = "\\.rds"))
}else{
align(index="my_index",readfile1=paste0(gsub(fileList1,pattern ="\\.fastq\\.gz$",replacement = ""),"_trimed2.fastq.gz"),
readfile2=paste0(gsub(fileList2,pattern ="\\.fastq\\.gz$",replacement = ""),"_trimed2.fastq.gz"),
output_file = file.path("./bam", gsub(basename(fo1),pattern ="_1.*\\.fastq\\.gz",replacement = "\\.bam")),
type=alignType,nthreads=subReadThreads,...)
saveRDS(object = featureCounts(files=file.path("./trimed", gsub(basename(fileList1),pattern ="_1.*\\.fastq\\.gz",replacement = "\\.bam")),
isPairedEnd=T,nthreads=subReadThreads,
annot.ext =genomeAnnotFile,
isGTFAnnotationFile = T,
verbose = T),
file = gsub(x=basename(fileList1),pattern ="_1.*\\.fastq\\.gz",replacement = "\\.rds"))
}
return(repList)
}
#' @export
seqW<- function(fileList1, fileList2=NULL,alignType="rna",subReadThreads=3L,shortreadRAM=1e8,
genomeRefFile="./GCF_000001405.26_GRCh38_genomic.fna.gz",
genomeAnnotFile="./GCF_000001405.39_GRCh38.p13_genomic.gtf.gz",
...){
repList<-vector(mode="list",length=length(fileList1))
for (i in 1:length(f1)){
res<-TrimAndFilter(fl1 = f1[i],fl2 = f2[i],...)
repList[i]<-list(res)}
if (!alignType %in% c('dna','rna','dnaLong','rnaExon_Exon','microRNA')){
stop("alignType must be one of 'dna' 'rna' 'dnaLong' 'rnaExon_Exon' 'microRNA'")
}else{
if (alignType %in% c("dna","rna")){
buildindex(basename="my_index",reference=genomeRefFile)
dir.create("./bam")
if (is.null(fileList2)) {
align(index="my_index",readfile1=paste0(gsub(fileList1,pattern ="\\.fastq\\.gz$",replacement = ""),"_trimed.fastq.gz"),
readfile2=NULL,
output_file = file.path("./bam", gsub(basename(fo1),pattern ="\\.fastq\\.gz$",replacement = "\\.bam")),
type=alignType,nthreads=subReadThreads,...)
saveRDS(object = featureCounts(files=file.path("./trimed", gsub(basename(fileList1),pattern ="\\.fastq\\.gz$",replacement = "\\.bam")),
isPairedEnd=F,nthreads=subReadThreads,
annot.ext =genomeAnnotFile,
isGTFAnnotationFile = T,
verbose = T),
file = gsub(x=basename(fileList1),pattern ="\\.fastq\\.gz$",replacement = "\\.rds"))
}else{
align(index="my_index",readfile1=paste0(gsub(fileList1,pattern ="\\.fastq\\.gz$",replacement = ""),"_trimed2.fastq.gz"),
readfile2=paste0(gsub(fileList2,pattern ="\\.fastq\\.gz$",replacement = ""),"_trimed2.fastq.gz"),
output_file = file.path("./bam", gsub(basename(fo1),pattern ="_1.*\\.fastq\\.gz",replacement = "\\.bam")),
type=alignType,nthreads=subReadThreads,...)
saveRDS(object = featureCounts(files=file.path("./trimed", gsub(basename(fileList1),pattern ="_1.*\\.fastq\\.gz",replacement = "\\.bam")),
isPairedEnd=T,nthreads=subReadThreads,
annot.ext =genomeAnnotFile,
isGTFAnnotationFile = T,
verbose = T),
file = gsub(x=basename(fileList1),pattern ="_1.*\\.fastq\\.gz",replacement = "\\.rds"))
}
}else{
if (alignType=="dnaLong"){
buildindex(basename="my_index",reference=genomeRefFile)
dir.create("./bam")
if (is.null(fileList2)) {
sublong(index="my_index",readfile1=paste0(gsub(fileList1,pattern ="\\.fastq\\.gz$",replacement = ""),"_trimed.fastq.gz"),
readfile2=NULL,
output_file = file.path("./bam", gsub(basename(fo1),pattern ="\\.fastq\\.gz$",replacement = "\\.bam")),
type="dna",nthreads=subReadThreads,...)
saveRDS(object = featureCounts(files=file.path("./trimed", gsub(basename(fileList1),pattern ="\\.fastq\\.gz$",replacement = "\\.bam")),
isPairedEnd=F,nthreads=subReadThreads,
annot.ext =genomeAnnotFile,
isGTFAnnotationFile = T,
verbose = T),
file = gsub(x=basename(fileList1),pattern ="\\.fastq\\.gz$",replacement = "\\.rds"))
}else{
sublong(index="my_index",readfile1=paste0(gsub(fileList1,pattern ="\\.fastq\\.gz$",replacement = ""),"_trimed2.fastq.gz"),
readfile2=paste0(gsub(fileList2,pattern ="\\.fastq\\.gz$",replacement = ""),"_trimed2.fastq.gz"),
output_file = file.path("./bam", gsub(basename(fo1),pattern ="_1.*\\.fastq\\.gz",replacement = "\\.bam")),
type="dna",nthreads=subReadThreads,...)
saveRDS(object = featureCounts(files=file.path("./trimed", gsub(basename(fileList1),pattern ="_1.*\\.fastq\\.gz",replacement = "\\.bam")),
isPairedEnd=T,nthreads=subReadThreads,
annot.ext =genomeAnnotFile,
isGTFAnnotationFile = T,
verbose = T),
file = gsub(x=basename(fileList1),pattern ="_1.*\\.fastq\\.gz",replacement = "\\.rds"))
}
}
if (alignType=="rnaExon_Exon"){
buildindex(basename="my_index",reference=genomeRefFile)
dir.create("./bam")
if (is.null(fileList2)) {
subjunc(index="my_index",readfile1=paste0(gsub(fileList1,pattern ="\\.fastq\\.gz$",replacement = ""),"_trimed.fastq.gz"),
readfile2=NULL,
output_file = file.path("./bam", gsub(basename(fo1),pattern ="\\.fastq\\.gz$",replacement = "\\.bam")),
type="rna",nthreads=subReadThreads,...)
saveRDS(object = featureCounts(files=file.path("./trimed", gsub(basename(fileList1),pattern ="\\.fastq\\.gz$",replacement = "\\.bam")),
isPairedEnd=F,nthreads=subReadThreads,
annot.ext =genomeAnnotFile,
isGTFAnnotationFile = T,
verbose = T),
file = gsub(x=basename(fileList1),pattern ="\\.fastq\\.gz$",replacement = "\\.rds"))
}else{
subjunc(index="my_index",readfile1=paste0(gsub(fileList1,pattern ="\\.fastq\\.gz$",replacement = ""),"_trimed2.fastq.gz"),
readfile2=paste0(gsub(fileList2,pattern ="\\.fastq\\.gz$",replacement = ""),"_trimed2.fastq.gz"),
output_file = file.path("./bam", gsub(basename(fo1),pattern ="_1.*\\.fastq\\.gz",replacement = "\\.bam")),
type="rna",nthreads=subReadThreads,...)
saveRDS(object = featureCounts(files=file.path("./trimed", gsub(basename(fileList1),pattern ="_1.*\\.fastq\\.gz",replacement = "\\.bam")),
isPairedEnd=T,nthreads=subReadThreads,
annot.ext =genomeAnnotFile,
isGTFAnnotationFile = T,
verbose = T),
file = gsub(x=basename(fileList1),pattern ="_1.*\\.fastq\\.gz",replacement = "\\.rds"))
}
}
if (alignType=="microRNA"){
buildindex(basename="my_index",reference=genomeRefFile,gappedIndex=F)
dir.create("./bam")
if (is.null(fileList2)) {
subjunc(index="my_index",readfile1=paste0(gsub(fileList1,pattern ="\\.fastq\\.gz$",replacement = ""),"_trimed.fastq.gz"),
readfile2=NULL,
output_file = file.path("./bam", gsub(basename(fo1),pattern ="\\.fastq\\.gz$",replacement = "\\.bam")),
type="rna",nthreads=subReadThreads,...)
saveRDS(object = featureCounts(files=file.path("./trimed", gsub(basename(fileList1),pattern ="\\.fastq\\.gz$",replacement = "\\.bam")),
isPairedEnd=F,nthreads=subReadThreads,
annot.ext =genomeAnnotFile,
isGTFAnnotationFile = T,
verbose = T),
file = gsub(x=basename(fileList1),pattern ="\\.fastq\\.gz$",replacement = "\\.rds"))
}else{
subjunc(index="my_index",readfile1=paste0(gsub(fileList1,pattern ="\\.fastq\\.gz$",replacement = ""),"_trimed2.fastq.gz"),
readfile2=paste0(gsub(fileList2,pattern ="\\.fastq\\.gz$",replacement = ""),"_trimed2.fastq.gz"),
output_file = file.path("./bam", gsub(basename(fo1),pattern ="_1.*\\.fastq\\.gz",replacement = "\\.bam")),
type="rna",nthreads=subReadThreads,...)
saveRDS(object = featureCounts(files=file.path("./trimed", gsub(basename(fileList1),pattern ="_1.*\\.fastq\\.gz",replacement = "\\.bam")),
isPairedEnd=T,nthreads=subReadThreads,
annot.ext =genomeAnnotFile,
isGTFAnnotationFile = T,
verbose = T),
file = gsub(x=basename(fileList1),pattern ="_1.*\\.fastq\\.gz",replacement = "\\.rds"))
}
}
}
}
return(repList)
}
View(seqW)
if 1 %in% 1:3
if (1 %in% 1:3)
1
!1 %in% 1:3
#' @export
seqW<- function(fileList1, fileList2=NULL,alignType="rna",subReadThreads=3L,shortreadRAM=1e8,
genomeRefFile="./GCF_000001405.26_GRCh38_genomic.fna.gz",
genomeAnnotFile="./GCF_000001405.39_GRCh38.p13_genomic.gtf.gz",
...){
repList<-vector(mode="list",length=length(fileList1))
for (i in 1:length(f1)){
res<-TrimAndFilter(fl1 = f1[i],fl2 = f2[i],...)
repList[i]<-list(res)}
if (!alignType %in% c('dna','rna','dnaLong','rnaExon_Exon','microRNA')){
stop("alignType must be one of 'dna' 'rna' 'dnaLong' 'rnaExon_Exon' 'microRNA'")
}else{
if (alignType %in% c("dna","rna")){
buildindex(basename="my_index",reference=genomeRefFile)
dir.create("./bam")
if (is.null(fileList2)) {
align(index="my_index",readfile1=paste0(gsub(fileList1,pattern ="\\.fastq\\.gz$",replacement = ""),"_trimed.fastq.gz"),
readfile2=NULL,
output_file = file.path("./bam", gsub(basename(fo1),pattern ="\\.fastq\\.gz$",replacement = "\\.bam")),
type=alignType,nthreads=subReadThreads,...)
saveRDS(object = featureCounts(files=file.path("./trimed", gsub(basename(fileList1),pattern ="\\.fastq\\.gz$",replacement = "\\.bam")),
isPairedEnd=F,nthreads=subReadThreads,
annot.ext =genomeAnnotFile,
isGTFAnnotationFile = T,
verbose = T,...),
file = gsub(x=basename(fileList1),pattern ="\\.fastq\\.gz$",replacement = "\\.rds"))
}else{
align(index="my_index",readfile1=paste0(gsub(fileList1,pattern ="\\.fastq\\.gz$",replacement = ""),"_trimed2.fastq.gz"),
readfile2=paste0(gsub(fileList2,pattern ="\\.fastq\\.gz$",replacement = ""),"_trimed2.fastq.gz"),
output_file = file.path("./bam", gsub(basename(fo1),pattern ="_1.*\\.fastq\\.gz",replacement = "\\.bam")),
type=alignType,nthreads=subReadThreads,...)
saveRDS(object = featureCounts(files=file.path("./trimed", gsub(basename(fileList1),pattern ="_1.*\\.fastq\\.gz",replacement = "\\.bam")),
isPairedEnd=T,nthreads=subReadThreads,
annot.ext =genomeAnnotFile,
isGTFAnnotationFile = T,
verbose = T,...),
file = gsub(x=basename(fileList1),pattern ="_1.*\\.fastq\\.gz",replacement = "\\.rds"))
}
}else{
if (alignType=="dnaLong"){
buildindex(basename="my_index",reference=genomeRefFile)
dir.create("./bam")
if (is.null(fileList2)) {
sublong(index="my_index",readfile1=paste0(gsub(fileList1,pattern ="\\.fastq\\.gz$",replacement = ""),"_trimed.fastq.gz"),
readfile2=NULL,
output_file = file.path("./bam", gsub(basename(fo1),pattern ="\\.fastq\\.gz$",replacement = "\\.bam")),
type="dna",nthreads=subReadThreads,...)
saveRDS(object = featureCounts(files=file.path("./trimed", gsub(basename(fileList1),pattern ="\\.fastq\\.gz$",replacement = "\\.bam")),
isPairedEnd=F,nthreads=subReadThreads,
annot.ext =genomeAnnotFile,
isGTFAnnotationFile = T,
verbose = T,...),
file = gsub(x=basename(fileList1),pattern ="\\.fastq\\.gz$",replacement = "\\.rds"))
}else{
sublong(index="my_index",readfile1=paste0(gsub(fileList1,pattern ="\\.fastq\\.gz$",replacement = ""),"_trimed2.fastq.gz"),
readfile2=paste0(gsub(fileList2,pattern ="\\.fastq\\.gz$",replacement = ""),"_trimed2.fastq.gz"),
output_file = file.path("./bam", gsub(basename(fo1),pattern ="_1.*\\.fastq\\.gz",replacement = "\\.bam")),
type="dna",nthreads=subReadThreads,...)
saveRDS(object = featureCounts(files=file.path("./trimed", gsub(basename(fileList1),pattern ="_1.*\\.fastq\\.gz",replacement = "\\.bam")),
isPairedEnd=T,nthreads=subReadThreads,
annot.ext =genomeAnnotFile,
isGTFAnnotationFile = T,
verbose = T,...),
file = gsub(x=basename(fileList1),pattern ="_1.*\\.fastq\\.gz",replacement = "\\.rds"))
}
}
if (alignType=="rnaExon_Exon"){
buildindex(basename="my_index",reference=genomeRefFile)
dir.create("./bam")
if (is.null(fileList2)) {
subjunc(index="my_index",readfile1=paste0(gsub(fileList1,pattern ="\\.fastq\\.gz$",replacement = ""),"_trimed.fastq.gz"),
readfile2=NULL,
output_file = file.path("./bam", gsub(basename(fo1),pattern ="\\.fastq\\.gz$",replacement = "\\.bam")),
type="rna",nthreads=subReadThreads,...)
saveRDS(object = featureCounts(files=file.path("./trimed", gsub(basename(fileList1),pattern ="\\.fastq\\.gz$",replacement = "\\.bam")),
isPairedEnd=F,nthreads=subReadThreads,
annot.ext =genomeAnnotFile,
isGTFAnnotationFile = T,
verbose = T,...),
file = gsub(x=basename(fileList1),pattern ="\\.fastq\\.gz$",replacement = "\\.rds"))
}else{
subjunc(index="my_index",readfile1=paste0(gsub(fileList1,pattern ="\\.fastq\\.gz$",replacement = ""),"_trimed2.fastq.gz"),
readfile2=paste0(gsub(fileList2,pattern ="\\.fastq\\.gz$",replacement = ""),"_trimed2.fastq.gz"),
output_file = file.path("./bam", gsub(basename(fo1),pattern ="_1.*\\.fastq\\.gz",replacement = "\\.bam")),
type="rna",nthreads=subReadThreads,...)
saveRDS(object = featureCounts(files=file.path("./trimed", gsub(basename(fileList1),pattern ="_1.*\\.fastq\\.gz",replacement = "\\.bam")),
isPairedEnd=T,nthreads=subReadThreads,
annot.ext =genomeAnnotFile,
isGTFAnnotationFile = T,
verbose = T,...),
file = gsub(x=basename(fileList1),pattern ="_1.*\\.fastq\\.gz",replacement = "\\.rds"))
}
}
if (alignType=="microRNA"){
buildindex(basename="my_index",reference=genomeRefFile,gappedIndex=F)
dir.create("./bam")
if (is.null(fileList2)) {
subjunc(index="my_index",readfile1=paste0(gsub(fileList1,pattern ="\\.fastq\\.gz$",replacement = ""),"_trimed.fastq.gz"),
readfile2=NULL,
output_file = file.path("./bam", gsub(basename(fo1),pattern ="\\.fastq\\.gz$",replacement = "\\.bam")),
type="rna",nthreads=subReadThreads,...)
saveRDS(object = featureCounts(files=file.path("./trimed", gsub(basename(fileList1),pattern ="\\.fastq\\.gz$",replacement = "\\.bam")),
isPairedEnd=F,nthreads=subReadThreads,
annot.ext =genomeAnnotFile,
isGTFAnnotationFile = T,
verbose = T,...),
file = gsub(x=basename(fileList1),pattern ="\\.fastq\\.gz$",replacement = "\\.rds"))
}else{
subjunc(index="my_index",readfile1=paste0(gsub(fileList1,pattern ="\\.fastq\\.gz$",replacement = ""),"_trimed2.fastq.gz"),
readfile2=paste0(gsub(fileList2,pattern ="\\.fastq\\.gz$",replacement = ""),"_trimed2.fastq.gz"),
output_file = file.path("./bam", gsub(basename(fo1),pattern ="_1.*\\.fastq\\.gz",replacement = "\\.bam")),
type="rna",nthreads=subReadThreads,...)
saveRDS(object = featureCounts(files=file.path("./trimed", gsub(basename(fileList1),pattern ="_1.*\\.fastq\\.gz",replacement = "\\.bam")),
isPairedEnd=T,nthreads=subReadThreads,
annot.ext =genomeAnnotFile,
isGTFAnnotationFile = T,
verbose = T,...),
file = gsub(x=basename(fileList1),pattern ="_1.*\\.fastq\\.gz",replacement = "\\.rds"))
}
}
}
}
return(repList)
}
knitr::opts_chunk$set(
eval = FALSE,
collapse = TRUE,
comment = "#>"
)
tabl <- "  # trim and filter parameters
| @param        | Are           | Cool  |
|---------------|:-------------:|------:|
| col 3 is      | right-aligned | $1600 |
| col 2 is      | centered      |   $12 |
| zebra stripes | are neat      |    $1 |
"
cat(tabl) # output the table in a format good for HTML/PDF/docx conversion
tabl <- "  # trim and filter parameters
| @param        | Are           | default value  |
|---------------|---------------|------:|
| col 3 is      | right-aligned | "?" |
| col 2 is      | centered      |   $12 |
| zebra stripes | are neat      |    $1 |
"
tabl <- "  # trim and filter parameters
| @param        | Are           | default value  |
|---------------|:---------------:|------:|
| col 3 is      | right-aligned | "?" |
| col 2 is      | centered      |   $12 |
| zebra stripes | are neat      |    $1 |
"
tabl <- "  # trim and filter parameters
| @param        | Are           | default value  |
|---------------|:-------------:|------:|
| col 3 is      | right-aligned | "?" |
| col 2 is      | centered      |   $12 |
| zebra stripes | are neat      |    $1 |
"
tabl <- "  # trim and filter parameters
| @param        | Are           | default value  |
|---------------|:-------------:|------:|
| col 3 is      | right-aligned | '?' |
| col 2 is      | centered      |   $12 |
| zebra stripes | are neat      |    $1 |
"
cat(tabl) # output the table in a format good for HTML/PDF/docx conversion
tabl <- "  # trim and filter parameters
| @param        | introduction           | default value  |
|---------------|:-------------:|------:|
| col 3 is      | Phred score threshold of the end base below which the end base will be trimmed | '?' |
| col 2 is      | centered      |   $12 |
| zebra stripes | are neat      |    $1 |
"
cat(tabl) # output the table in a format good for HTML/PDF/docx conversion
